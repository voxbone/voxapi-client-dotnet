/*
 * ProvisioningAPI.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/26/2015
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using unirest_net.http;
using unirest_net.request;
using ProvisioningAPI.PCL;
using ProvisioningAPI.PCL.Models;

namespace ProvisioningAPI.PCL.Controllers
{
    public class OrderingController
    {

        //private fields for configuration

        //The username to use with basic authentication 
        private string basicAuthUserName;

        //The password to use with basic authentication 
        private string basicAuthPassword;

        /// <summary>
        /// Constructor with authentication and configuration parameters
        /// </summary>
        public OrderingController(string basicAuthUserName, string basicAuthPassword)
        {
            this.basicAuthUserName = basicAuthUserName;
            this.basicAuthPassword = basicAuthPassword;
        }

        /// <summary>
        /// The accountBalance method is used to retrieve information about your account balance.
        /// </summary>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetAccountBalanceAsync()
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/ordering/accountbalance");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// cancelDids is a method that allows you to cancel one or multiple DIDs.
        /// </summary>
        /// <param name="didIds">Required parameter: Array of identifier of the dids to cancel from order</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateCancelDidsAsync(
                List<object> didIds)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/ordering/cancel");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.post(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .header("Content-type", "application/json; charset=utf-8")
                .basicAuth(basicAuthUserName, basicAuthPassword)
                .body(APIHelper.JsonSerialize(didIds));

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listCart is a method that allows you to list your carts and retrieve their attributes (cartIdentifier, customerReference, description), and their content (list of products - orderProducts - that are currently in the cart).
        /// </summary>
        /// <param name="pageNumber">Required parameter: The page number, starting at 0.</param>
        /// <param name="pageSize">Required parameter: The page size (max number of entities that are displayed in the response).</param>
        /// <param name="cartIdentifier">Optional parameter: Unique identifier for your cart. Please see the 'Create cart' or 'List cart' operations operations for more information.</param>
        /// <param name="reference">Optional parameter: The reference that was given upon the cart creation.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListCartAsync(
                string pageNumber,
                string pageSize,
                string cartIdentifier = null,
                string reference = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/ordering/cart");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "pageNumber", pageNumber },
                    { "pageSize", pageSize },
                    { "cartIdentifier", cartIdentifier },
                    { "reference", reference }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listOrder is a method that allows you to get a list of your orders (after a cart has been checked out) and their status.
        /// </summary>
        /// <param name="pageNumber">Required parameter: The page number, starting at 0.</param>
        /// <param name="pageSize">Required parameter: The page size (max number of entities that are displayed in the response).</param>
        /// <param name="reference">Optional parameter: The order reference.</param>
        /// <param name="status">Optional parameter: The status of the order.</param>
        /// <param name="dateFrom">Optional parameter: When set, the system will search for orders placed after this date.</param>
        /// <param name="dateTo">Optional parameter: When set, the system will search for orders placed before this date.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListOrderAsync(
                string pageNumber,
                string pageSize,
                string reference = null,
                string status = null,
                string dateFrom = null,
                string dateTo = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/ordering/order");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "pageNumber", pageNumber },
                    { "pageSize", pageSize },
                    { "reference", reference },
                    { "status", status },
                    { "dateFrom", dateFrom },
                    { "dateTo", dateTo }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// deleteCart is a method that allows you to delete a cart and all its content from your list of carts.
        /// </summary>
        /// <param name="cartIdentifier">Required parameter: The identifier of the cart.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> DeleteCartAsync(
                string cartIdentifier)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/ordering/cart/{cartIdentifier}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "cartIdentifier", cartIdentifier }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.delete(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// checkoutCart is a method that allows you to checkout a cart and place an order for all the products contained in the cart. You can then retrieve your orders using the listOrder method.
        /// </summary>
        /// <param name="cartIdentifier">Required parameter: The identifier of the cart.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetCheckoutCartAsync(
                string cartIdentifier)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/ordering/cart/{cartIdentifier}/checkout");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "cartIdentifier", cartIdentifier }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// addToCart is a method that allows you to add items (orderProducts) to a specific cart before checking out the cart. Different product types (DID, CAPACITY or CREDIT_PACKAGE) can be added into one single cart.
        /// </summary>
        /// <param name="cartIdentifier">Required parameter: The identifier of the cart.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> AddToCartAsync(
                string cartIdentifier)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/ordering/cart/{cartIdentifier}/product");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "cartIdentifier", cartIdentifier }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.post(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// Remove a product from your cart, or change the ordered quantity.
        /// </summary>
        /// <param name="cartIdentifier">Required parameter: The identifier of the cart.</param>
        /// <param name="orderProductId">Required parameter: The identifier of the product.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateRemoveFromCartAsync(
                string cartIdentifier,
                string orderProductId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/ordering/cart/{cartIdentifier}/product/{orderProductId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "cartIdentifier", cartIdentifier },
                    { "orderProductId", orderProductId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.post(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

    }
} 