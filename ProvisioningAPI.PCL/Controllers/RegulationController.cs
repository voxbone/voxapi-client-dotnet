/*
 * ProvisioningAPI.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/26/2015
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using unirest_net.http;
using unirest_net.request;
using ProvisioningAPI.PCL;
using ProvisioningAPI.PCL.Models;

namespace ProvisioningAPI.PCL.Controllers
{
    public class RegulationController
    {

        //private fields for configuration

        //The username to use with basic authentication 
        private string basicAuthUserName;

        //The password to use with basic authentication 
        private string basicAuthPassword;

        /// <summary>
        /// Constructor with authentication and configuration parameters
        /// </summary>
        public RegulationController(string basicAuthUserName, string basicAuthPassword)
        {
            this.basicAuthUserName = basicAuthUserName;
            this.basicAuthPassword = basicAuthPassword;
        }

        /// <summary>
        /// listRegulationAddress is a method that allows you to list or your existing regulation addresses.
        /// </summary>
        /// <param name="pageNumber">Required parameter: The page number, starting at 0.</param>
        /// <param name="pageSize">Required parameter: The page size (max number of entities that are displayed in the response).</param>
        /// <param name="regulationAddressId">Optional parameter: Identifier of the regulation address id.</param>
        /// <param name="companyName">Optional parameter: Name of the company.</param>
        /// <param name="firstName">Optional parameter: First name of the customer.</param>
        /// <param name="lastName">Optional parameter: Last name of the customer.</param>
        /// <param name="countryCodeA3">Optional parameter: The three letter identifier for the address's country.</param>
        /// <param name="city">Optional parameter: The city for the address.</param>
        /// <param name="zipCode">Optional parameter: The zip code for the address.</param>
        /// <param name="streetName">Optional parameter: The street for the address.</param>
        /// <param name="buildingNumber">Optional parameter: The building number for the address.</param>
        /// <param name="customerReference">Optional parameter: The reference for the customer.</param>
        /// <param name="status">Optional parameter: The status of the regulation address.</param>
        /// <param name="linked">Optional parameter: Flag that specifies if the addresses should be linked to a DID.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListRegulationAddressAsync(
                string pageNumber,
                string pageSize,
                string regulationAddressId = null,
                string companyName = null,
                string firstName = null,
                string lastName = null,
                string countryCodeA3 = null,
                string city = null,
                string zipCode = null,
                string streetName = null,
                string buildingNumber = null,
                string customerReference = null,
                string status = null,
                bool? linked = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/regulation/address");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "pageNumber", pageNumber },
                    { "pageSize", pageSize },
                    { "regulationAddressId", regulationAddressId },
                    { "companyName", companyName },
                    { "firstName", firstName },
                    { "lastName", lastName },
                    { "countryCodeA3", countryCodeA3 },
                    { "city", city },
                    { "zipCode", zipCode },
                    { "streetName", streetName },
                    { "buildingNumber", buildingNumber },
                    { "customerReference", customerReference },
                    { "status", status },
                    { "linked", linked }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listZipCodes is a method that allows you to get the matching cities and zip codes for a certain country or DID’s area code. This is an absolute requirement for certain countries where the city and zip code will have to match the DID’s area code for instance in Germany (DEU), Croatia (HRV), South Korea (KOR), etc…
        /// </summary>
        /// <param name="countryCodeA3">Required parameter: The A3 code of the country to look for zip codes.</param>
        /// <param name="pageNumber">Required parameter: The page number, starting at 0.</param>
        /// <param name="pageSize">Required parameter: The page size (max number of entities that are displayed in the response).</param>
        /// <param name="areaCode">Optional parameter: The area code to look for zip codes.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListZipCodesAsync(
                string countryCodeA3,
                string pageNumber,
                string pageSize,
                string areaCode = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/regulation/zipcode");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "countryCodeA3", countryCodeA3 },
                    { "pageNumber", pageNumber },
                    { "pageSize", pageSize },
                    { "areaCode", areaCode }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// Unlinking regulation address is a different request in REST than linking regulation addresses but the same request in SOAP. The difference is only to set the regulationAddressId field empty.
        /// </summary>
        /// <param name="didIds">Required parameter: Array of DID IDs you wish to unlink to a regulation address.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateUnlinkRegulationAddressAsync(
                List<string> didIds)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/regulation/address/unlink");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.post(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .header("Content-type", "application/json; charset=utf-8")
                .basicAuth(basicAuthUserName, basicAuthPassword)
                .body(APIHelper.JsonSerialize(didIds));

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// deleteRegulationAddress is a method that allows you to delete a regulation address.
        /// </summary>
        /// <param name="regulationAddressId">Required parameter: The regulation address identifier.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> DeleteRegulationAddressAsync(
                string regulationAddressId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/regulation/address/{regulationAddressId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "regulationAddressId", regulationAddressId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.delete(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// linkRegulationAddress is a method that allows you to link one or multiple DIDs to a regulation address.
        /// </summary>
        /// <param name="regulationAddressId">Required parameter: The identifier of the regulation address.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateLinkRegulationAddressAsync(
                string regulationAddressId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/regulation/address/{regulationAddressId}/link");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "regulationAddressId", regulationAddressId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.post(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// uploadProofOfAddress is a method that allows you to separately upload a proof of address after the address is created (the upload is done automatically during the address creation if the document is specified).
        /// </summary>
        /// <param name="regulationAddressId">Optional parameter: The identifier of the regulation address.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UploadProofOfAddressAsync(
                string regulationAddressId = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/regulation/address/{regulationAddressId}/proof");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "regulationAddressId", regulationAddressId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.put(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .header("Content-Type:", "multipart/form-data;boundary=XXX")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// isAddressValid is a method that allows to check the validity of an address against a certain DID’s type and country. This can be useful if you have originally created an address for a given DID and you wish to reuse that same address for another DID.
        /// </summary>
        /// <param name="didType">Required parameter: The did type for the destination did.</param>
        /// <param name="destinationCountryCodeA3">Required parameter: The three letter identifier for country the destination did.</param>
        /// <param name="regulationAddressId">Required parameter: The identifier of the regulation address.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetIsAddressValidAsync(
                string didType,
                string destinationCountryCodeA3,
                string regulationAddressId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/regulation/address/{regulationAddressId}/validation");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "regulationAddressId", regulationAddressId }
                });

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "didType", didType },
                    { "destinationCountryCodeA3", destinationCountryCodeA3 }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// requestAddressVerification is a method that allows you to request a separate address verification.
        /// </summary>
        /// <param name="regulationAddressId">Required parameter: The identifier of the regulation address.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateRequestAddressVerificationAsync(
                string regulationAddressId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/regulation/address/{regulationAddressId}/verification");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "regulationAddressId", regulationAddressId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.put(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

    }
} 