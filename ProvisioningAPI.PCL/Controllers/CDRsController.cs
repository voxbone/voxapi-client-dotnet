/*
 * ProvisioningAPI.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/26/2015
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using unirest_net.http;
using unirest_net.request;
using ProvisioningAPI.PCL;
using ProvisioningAPI.PCL.Models;

namespace ProvisioningAPI.PCL.Controllers
{
    public class CDRsController
    {

        //private fields for configuration

        //The username to use with basic authentication 
        private string basicAuthUserName;

        //The password to use with basic authentication 
        private string basicAuthPassword;

        /// <summary>
        /// Constructor with authentication and configuration parameters
        /// </summary>
        public CDRsController(string basicAuthUserName, string basicAuthPassword)
        {
            this.basicAuthUserName = basicAuthUserName;
            this.basicAuthPassword = basicAuthPassword;
        }

        /// <summary>
        /// The listExistingFile method allows you to list all the files that are available for download. You should use that method to get the name of the file before you can use the downloadFile method which requires the file name as an input parameter.
        /// </summary>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListExistingFilesAsync()
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/cdrs/cdrsfile");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// Downloads the requested cdrs archive file with the given name using Mtom.
        /// </summary>
        /// <param name="fileName">Required parameter: The name of the file to download.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetDownloadFileAsync(
                string fileName)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/cdrs/cdrsfile/{fileName}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "fileName", fileName }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// Sends a request to generate a report with all the cdrs for the given month and year. Note that it is only possible to request the generation of a report for a month set in the past.
        /// </summary>
        /// <param name="month">Required parameter: The desired month for the report generation.</param>
        /// <param name="year">Required parameter: The desired year for the report generation.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateRequestFileCreationAsync(
                string month,
                string year)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/cdrs/cdrsfile/request/{year}/{month}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "month", month },
                    { "year", year }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.post(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

    }
} 