/*
 * ProvisioningAPI.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/26/2015
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using unirest_net.http;
using unirest_net.request;
using ProvisioningAPI.PCL;
using ProvisioningAPI.PCL.Models;

namespace ProvisioningAPI.PCL.Controllers
{
    public class InventoryController
    {

        //private fields for configuration

        //The username to use with basic authentication 
        private string basicAuthUserName;

        //The password to use with basic authentication 
        private string basicAuthPassword;

        /// <summary>
        /// Constructor with authentication and configuration parameters
        /// </summary>
        public InventoryController(string basicAuthUserName, string basicAuthPassword)
        {
            this.basicAuthUserName = basicAuthUserName;
            this.basicAuthPassword = basicAuthPassword;
        }

        /// <summary>
        /// listCapacityGroup is a method that allows you to get the list of your capacity groups.
        /// </summary>
        /// <param name="pageNumber">Required parameter: The page number, starting at 0.</param>
        /// <param name="pageSize">Required parameter: The page size (max number of entities that are displayed in the response).</param>
        /// <param name="capacityGroupId">Optional parameter: The identifier of the capacity group to search for.</param>
        /// <param name="description">Optional parameter: The description of the capacity group.</param>
        /// <param name="e164">Optional parameter: The e164 bound to the capacity group.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListCapacityGroupAsync(
                string pageNumber,
                string pageSize,
                string capacityGroupId = null,
                string description = null,
                string e164 = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/configuration/capacitygroup");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "pageNumber", pageNumber },
                    { "pageSize", pageSize },
                    { "capacityGroupId", capacityGroupId },
                    { "description", description },
                    { "e164", e164 }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// The listCountry operation allows you to search for countries available in the Voxbone coverage.
        /// </summary>
        /// <param name="pageNumber">Required parameter: The page number, starting at 0.</param>
        /// <param name="pageSize">Required parameter: The page size (max number of entities that are displayed in the response).</param>
        /// <param name="countryCodeA3">Optional parameter: The three letter identifier of the country.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListCountryAsync(
                string pageNumber,
                string pageSize,
                string countryCodeA3 = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/inventory/country");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "pageNumber", pageNumber },
                    { "pageSize", pageSize },
                    { "countryCodeA3", countryCodeA3 }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listCreditPackage is a method related to Voxbone’s inventory. This method is used to retrieve the list of packages that are available for prepaid credits top-ups (e.g. $100 Prepaid Credits package which shows a value multiplied by 100: “Price100=10000”).
        /// </summary>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListCreditPackageAsync()
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/inventory/creditpackage");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listDid is a method related to your own inventory. This method allows you to search for DIDs within your own inventory. This method can be useful to get the current configuration of one or multiple DIDs.
        /// </summary>
        /// <param name="pageSize">Required parameter: The page size (max number of entities that are displayed in the response).</param>
        /// <param name="pageNumber">Required parameter: The page number, starting at 0.</param>
        /// <param name="webRtcEnabled">Optional parameter: A boolean flag indicating if the numbers are WebRTC flagged.</param>
        /// <param name="smsOutbound">Optional parameter: A boolean flag indicating if the numbers are SMS Outbound flagged.</param>
        /// <param name="deliveryId">Optional parameter: The identifier of the pop the numbers are mapped to.</param>
        /// <param name="portingReference">Optional parameter: The reference for the numbers' porting request.</param>
        /// <param name="orderReference">Optional parameter: The reference for the numbers' order.</param>
        /// <param name="countryCodeA3">Optional parameter: The three letter identifier of the country the numbers are part of.</param>
        /// <param name="serviceType">Optional parameter: The service type of the numbers.</param>
        /// <param name="smsLinkGroupId">Optional parameter: The identifier of the sms link group the numbers are mapped to.</param>
        /// <param name="faxUriId">Optional parameter: The identifier of the fax uri the numbers are mapped to.</param>
        /// <param name="voiceUriId">Optional parameter: The identifier of the voice uri the numbers are mapped to.</param>
        /// <param name="regulationAddressId">Optional parameter: The identifier of the address the numbers are linked to.</param>
        /// <param name="e164Pattern">Optional parameter: The E164, or part of it. The system will attempt to find any number which E164 contains this string of numbers.</param>
        /// <param name="didGroupIds">Optional parameter: A list of identifiers for the didGroup the numbers are part of.</param>
        /// <param name="needAddressLink">Optional parameter: A boolean flag indicating if the numbers need to be linked to an address for regulation purposes.</param>
        /// <param name="didIds">Optional parameter: A list of number identifiers.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListDidAsync(
                string pageSize,
                string pageNumber,
                string webRtcEnabled = null,
                string smsOutbound = null,
                string deliveryId = null,
                string portingReference = null,
                string orderReference = null,
                string countryCodeA3 = null,
                string serviceType = null,
                string smsLinkGroupId = null,
                string faxUriId = null,
                string voiceUriId = null,
                string regulationAddressId = null,
                string e164Pattern = null,
                string didGroupIds = null,
                string needAddressLink = null,
                string didIds = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/inventory/did");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "pageSize", pageSize },
                    { "pageNumber", pageNumber },
                    { "webRtcEnabled", webRtcEnabled },
                    { "smsOutbound", smsOutbound },
                    { "deliveryId", deliveryId },
                    { "portingReference", portingReference },
                    { "orderReference", orderReference },
                    { "countryCodeA3", countryCodeA3 },
                    { "serviceType", serviceType },
                    { "smsLinkGroupId", smsLinkGroupId },
                    { "faxUriId", faxUriId },
                    { "voiceUriId", voiceUriId },
                    { "regulationAddressId", regulationAddressId },
                    { "e164Pattern", e164Pattern },
                    { "didGroupIds", didGroupIds },
                    { "needAddressLink", needAddressLink },
                    { "didIds", didIds }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listDidGroup is a method related to Voxbone’s inventory. It allows you to retrieve the list of DID groups. A DID group can be defined as the smallest set of DIDs which is usually DIDs that share the same city or area code attributes. It is a method which is useful to get pricing info on a DID and to get didGroupIds which is a required parameter when placing a DID order.
        /// </summary>
        /// <param name="countryCodeA3">Required parameter: The three letter identifier for the didGroup's country.</param>
        /// <param name="pageNumber">Required parameter: The page number, starting at 0.</param>
        /// <param name="pageSize">Required parameter: The page size (max number of entities that are displayed in the response).</param>
        /// <param name="didGroupIds">Optional parameter: The list of didGroup identifier.</param>
        /// <param name="stateId">Optional parameter: The numerical identifier for the didGroup's state. Please see the listState operation to retrieve a validstate identifier.</param>
        /// <param name="cityNamePattern">Optional parameter: The name of the didGroup's city. Note that the system will execute a partial match on the city name.</param>
        /// <param name="rateCenter">Optional parameter: The name of the didGroup's ratecenter. Note that the system will execute a partial match on the ratecenter name.</param>
        /// <param name="areaCode">Optional parameter: The didGroup's area code.</param>
        /// <param name="didType">Optional parameter: The didGroup's did type.</param>
        /// <param name="showEmpty">Optional parameter: Set to true if you want to show the didGroups with no stock currently available.</param>
        /// <param name="featureIds">Optional parameter: The list of desired feature. This list should contain the identifier of any desired feature for the didGroup.Please refer to the listFeature operation to retrieve valid feature identifiers.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListDidGroupAsync(
                string countryCodeA3,
                string pageNumber,
                string pageSize,
                string didGroupIds = null,
                string stateId = null,
                string cityNamePattern = null,
                string rateCenter = null,
                string areaCode = null,
                string didType = null,
                string showEmpty = null,
                string featureIds = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/inventory/didgroup");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "countryCodeA3", countryCodeA3 },
                    { "pageNumber", pageNumber },
                    { "pageSize", pageSize },
                    { "didGroupIds", didGroupIds },
                    { "stateId", stateId },
                    { "cityNamePattern", cityNamePattern },
                    { "rateCenter", rateCenter },
                    { "areaCode", areaCode },
                    { "didType", didType },
                    { "showEmpty", showEmpty },
                    { "featureIds", featureIds }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listFeature is a method related to Voxbone’s inventory. It allows you to retrieve the list of features (featureID, name and description) that DIDs can have such as VoxFAX or VoxSMS.
        /// </summary>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListFeatureAsync()
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/inventory/feature");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listTrunk is a method related to your own inventory. This method allows you to get the list of the trunks that are available in your account.
        /// </summary>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListTrunkAsync()
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/inventory/trunk");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// The listZone operation allows you to display all the zones currently configured in your account.
        /// </summary>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListZoneAsync()
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/inventory/zone");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// The listCountry operation allows you to search for countries available in the Voxbone coverage.
        /// </summary>
        /// <param name="countryCodeA3">Required parameter: The three letter identifier of the country.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListACountryAsync(
                string countryCodeA3)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/inventory/country/{countryCodeA3}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "countryCodeA3", countryCodeA3 }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listRestriction is a method related to Voxbone’s inventory. It allows you to get the list of restrictions per country in a text format.
        /// </summary>
        /// <param name="countryCodeA3">Required parameter: The three letter identifier of the country.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListRestrictionAsync(
                string countryCodeA3)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/inventory/country/{countryCodeA3}/restriction");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "countryCodeA3", countryCodeA3 }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listState is a method related to Voxbone’s inventory. It allows you to get the list of states for a country that has states such as USA and CAN.
        /// </summary>
        /// <param name="countryCodeA3">Required parameter: The three letter identifier of the country.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListStateAsync(
                string countryCodeA3)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/inventory/country/{countryCodeA3}/state");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "countryCodeA3", countryCodeA3 }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

    }
} 