/*
 * ProvisioningAPI.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 01/26/2015
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using unirest_net.http;
using unirest_net.request;
using ProvisioningAPI.PCL;
using ProvisioningAPI.PCL.Models;

namespace ProvisioningAPI.PCL.Controllers
{
    public class ConfigurationController
    {

        //private fields for configuration

        //The username to use with basic authentication 
        private string basicAuthUserName;

        //The password to use with basic authentication 
        private string basicAuthPassword;

        /// <summary>
        /// Constructor with authentication and configuration parameters
        /// </summary>
        public ConfigurationController(string basicAuthUserName, string basicAuthPassword)
        {
            this.basicAuthUserName = basicAuthUserName;
            this.basicAuthPassword = basicAuthPassword;
        }

        /// <summary>
        /// The applyConfiguration method is used to configure one or multiple DIDs with certain settings. The possible settings that can be configured for each DID are described below in the list of input parameters.
        /// </summary>
        /// <param name="didIds">Required parameter: This is the list of DIDs (IDs) to be configured. Returned in checkoutCart() and listDid().</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> CreateApplyConfigurationAsync(
                string didIds)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/configuration/configuration");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.post(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword)
                .body(didIds);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listFaxUri is a method that allows you to get the list of your Fax URIs and their details.
        /// </summary>
        /// <param name="pageNumber">Required parameter: The page number, starting at 0.</param>
        /// <param name="pageSize">Required parameter: The page size (max number of entities that are displayed in the response).</param>
        /// <param name="faxUriId">Optional parameter: The identifier of the fax uri.</param>
        /// <param name="deliveryMethod">Optional parameter: The delivery method used for this fax uri.</param>
        /// <param name="faxFileFormat">Optional parameter: The file format used for this fax uri.</param>
        /// <param name="uri">Optional parameter: The actual uri where the fax should be delivered. Please note that by default the system will try to find an exact match.If you would like to search for part of the uri, you can use the '%' character as a wildcard.</param>
        /// <param name="csid">Optional parameter: The called station id. Please note that by default the system will try to find an exact match.If you would like to search for part of the uri, you can use the '%' character as a wildcard.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListFaxUriAsync(
                string pageNumber,
                string pageSize,
                string faxUriId = null,
                string deliveryMethod = null,
                string faxFileFormat = null,
                string uri = null,
                string csid = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/configuration/faxuri");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "pageNumber", pageNumber },
                    { "pageSize", pageSize },
                    { "faxUriId", faxUriId },
                    { "deliveryMethod", deliveryMethod },
                    { "faxFileFormat", faxFileFormat },
                    { "uri", uri },
                    { "csid", csid }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listPop is a method that allows you to get the list of Voxboneâ€™s POPs (Points Of Presence) and their corresponding IP addresses.
        /// </summary>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListPopAsync()
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/configuration/pop");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listSmsLink is a method that allows you to retrieve the list of your SMS link groups.
        /// </summary>
        /// <param name="smsLinkId">Optional parameter: The identifier of the sms link.</param>
        /// <param name="groupId">Optional parameter: The identifier of the sms link group.</param>
        /// <param name="type">Optional parameter: The protocol of the sms link.</param>
        /// <param name="direction">Optional parameter: The direction of the sms link.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListSmsLinkAsync(
                string smsLinkId = null,
                string groupId = null,
                string type = null,
                string direction = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/configuration/smslink");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "smsLinkId", smsLinkId },
                    { "groupId", groupId },
                    { "type", type },
                    { "direction", direction }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// saveSmsLinkGroup is a method that allows you to create an SMS link group. An SMS link group is an entity that contains one or several links. For SMS traffic coming from Voxbone to one of your DIDs, you need to link the DID to the link group so that the traffic can be routed to the appropriate destination. If several links are contained in the link group, the traffic will be load balanced according to the weight parameter defined in the links definition.
        /// </summary>
        /// <param name="name">Optional parameter: This is the name of the link group that you wish to create. There is no specific limitations except that the name should contain less than 255 characters.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> UpdateSaveSmsLinkGroupAsync(
                string name = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/configuration/smslinkgroup");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.put(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword)
                .body(name);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// listVoiceUri is a method that allows you to get the list of your Voice URIs and their details.
        /// </summary>
        /// <param name="pageNumber">Required parameter: The page number, starting at 0.</param>
        /// <param name="pageSize">Required parameter: The page size (max number of entities that are displayed in the response).</param>
        /// <param name="voiceUriId">Optional parameter: The identifier of the voice uri.</param>
        /// <param name="backupUriId">Optional parameter: The identifier of the voice uri acting as backup.</param>
        /// <param name="voiceUriProtocol">Optional parameter: The protocol to use with this voice uri.</param>
        /// <param name="uri">Optional parameter: The actual uri where the call will be delivered.</param>
        /// <param name="description">Optional parameter: A human-readable description of this uri.</param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> ListVoiceUriAsync(
                string pageNumber,
                string pageSize,
                string voiceUriId = null,
                string backupUriId = null,
                string voiceUriProtocol = null,
                string uri = null,
                string description = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/configuration/voiceuri");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "pageNumber", pageNumber },
                    { "pageSize", pageSize },
                    { "voiceUriId", voiceUriId },
                    { "backupUriId", backupUriId },
                    { "voiceUriProtocol", voiceUriProtocol },
                    { "uri", uri },
                    { "description", description }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<dynamic>(response.Body);
        }

        /// <summary>
        /// Allows you to remove one of your capacity groups.
        /// </summary>
        /// <param name="capacityGroupId">Required parameter: The identifier of the capacity group.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteCapacityGroupIdAsync(
                string capacityGroupId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/configuration/capacitygroup/{capacityGroupId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "capacityGroupId", capacityGroupId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.delete(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

        }

        /// <summary>
        /// deleteFaxUri is a method that allows you to remove one of your Fax URIs.
        /// </summary>
        /// <param name="faxUriId">Required parameter: The identifier of the fax uri.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteFaxUriAsync(
                string faxUriId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/configuration/faxuri/{faxUriId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "faxUriId", faxUriId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.delete(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

        }

        /// <summary>
        /// deleteSmsLink is a method that allows you to delete an SMS link.
        /// </summary>
        /// <param name="smsLinkId">Required parameter: The identifier of the sms link.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteSmsLinkAsync(
                string smsLinkId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/configuration/smslink/{smsLinkId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "smsLinkId", smsLinkId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.delete(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

        }

        /// <summary>
        /// deleteSmsLinkGroup is a method that allows you to delete an SMS link group.
        /// </summary>
        /// <param name="smsLinkGroupId">Required parameter: The smsLinkGroupId to be deleted</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteSmsLinkGroupAsync(
                string smsLinkGroupId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/configuration/smslinkgroup/{smsLinkGroupId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "smsLinkGroupId", smsLinkGroupId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.delete(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

        }

        /// <summary>
        /// deleteVoiceUri is a method that allows you to remove one of your voice URIs.
        /// </summary>
        /// <param name="voiceUriId">Required parameter: The identifier of the voice uri.</param>
        /// <return>Returns the void response from the API call</return>
        public async Task DeleteVoiceUriAsync(
                string voiceUriId)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/services/rest/configuration/voiceuri/{voiceUriId}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "voiceUriId", voiceUriId }
                });

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.delete(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .basicAuth(basicAuthUserName, basicAuthPassword);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

        }

    }
} 